
// --------------------------------------------------------
// Generated by glux perl script (Tue May 20 01:36:42 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GLX_VERSION_1_3__
#define __GLUX_GLX_VERSION_1_3__

GLUX_NEW_PLUGIN(GLX_VERSION_1_3);
// --------------------------------------------------------
#if !(defined WIN32 || defined __APPLE__)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GLX_WINDOW_BIT
#  define GLX_WINDOW_BIT 0x00000001
#endif
#ifndef GLX_PIXMAP_BIT
#  define GLX_PIXMAP_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_BIT
#  define GLX_PBUFFER_BIT 0x00000004
#endif
#ifndef GLX_RGBA_BIT
#  define GLX_RGBA_BIT 0x00000001
#endif
#ifndef GLX_COLOR_INDEX_BIT
#  define GLX_COLOR_INDEX_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_CLOBBER_MASK
#  define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#endif
#ifndef GLX_FRONT_LEFT_BUFFER_BIT
#  define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#endif
#ifndef GLX_FRONT_RIGHT_BUFFER_BIT
#  define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#endif
#ifndef GLX_BACK_LEFT_BUFFER_BIT
#  define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#endif
#ifndef GLX_BACK_RIGHT_BUFFER_BIT
#  define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#endif
#ifndef GLX_AUX_BUFFERS_BIT
#  define GLX_AUX_BUFFERS_BIT 0x00000010
#endif
#ifndef GLX_DEPTH_BUFFER_BIT
#  define GLX_DEPTH_BUFFER_BIT 0x00000020
#endif
#ifndef GLX_STENCIL_BUFFER_BIT
#  define GLX_STENCIL_BUFFER_BIT 0x00000040
#endif
#ifndef GLX_ACCUM_BUFFER_BIT
#  define GLX_ACCUM_BUFFER_BIT 0x00000080
#endif
#ifndef GLX_CONFIG_CAVEAT
#  define GLX_CONFIG_CAVEAT 0x20
#endif
#ifndef GLX_X_VISUAL_TYPE
#  define GLX_X_VISUAL_TYPE 0x22
#endif
#ifndef GLX_TRANSPARENT_TYPE
#  define GLX_TRANSPARENT_TYPE 0x23
#endif
#ifndef GLX_TRANSPARENT_INDEX_VALUE
#  define GLX_TRANSPARENT_INDEX_VALUE 0x24
#endif
#ifndef GLX_TRANSPARENT_RED_VALUE
#  define GLX_TRANSPARENT_RED_VALUE 0x25
#endif
#ifndef GLX_TRANSPARENT_GREEN_VALUE
#  define GLX_TRANSPARENT_GREEN_VALUE 0x26
#endif
#ifndef GLX_TRANSPARENT_BLUE_VALUE
#  define GLX_TRANSPARENT_BLUE_VALUE 0x27
#endif
#ifndef GLX_TRANSPARENT_ALPHA_VALUE
#  define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#endif
#ifndef GLX_DONT_CARE
#  define GLX_DONT_CARE 0xFFFFFFFF
#endif
#ifndef GLX_NONE
#  define GLX_NONE 0x8000
#endif
#ifndef GLX_SLOW_CONFIG
#  define GLX_SLOW_CONFIG 0x8001
#endif
#ifndef GLX_TRUE_COLOR
#  define GLX_TRUE_COLOR 0x8002
#endif
#ifndef GLX_DIRECT_COLOR
#  define GLX_DIRECT_COLOR 0x8003
#endif
#ifndef GLX_PSEUDO_COLOR
#  define GLX_PSEUDO_COLOR 0x8004
#endif
#ifndef GLX_STATIC_COLOR
#  define GLX_STATIC_COLOR 0x8005
#endif
#ifndef GLX_GRAY_SCALE
#  define GLX_GRAY_SCALE 0x8006
#endif
#ifndef GLX_STATIC_GRAY
#  define GLX_STATIC_GRAY 0x8007
#endif
#ifndef GLX_TRANSPARENT_RGB
#  define GLX_TRANSPARENT_RGB 0x8008
#endif
#ifndef GLX_TRANSPARENT_INDEX
#  define GLX_TRANSPARENT_INDEX 0x8009
#endif
#ifndef GLX_VISUAL_ID
#  define GLX_VISUAL_ID 0x800B
#endif
#ifndef GLX_SCREEN
#  define GLX_SCREEN 0x800C
#endif
#ifndef GLX_NON_CONFORMANT_CONFIG
#  define GLX_NON_CONFORMANT_CONFIG 0x800D
#endif
#ifndef GLX_DRAWABLE_TYPE
#  define GLX_DRAWABLE_TYPE 0x8010
#endif
#ifndef GLX_RENDER_TYPE
#  define GLX_RENDER_TYPE 0x8011
#endif
#ifndef GLX_X_RENDERABLE
#  define GLX_X_RENDERABLE 0x8012
#endif
#ifndef GLX_FBCONFIG_ID
#  define GLX_FBCONFIG_ID 0x8013
#endif
#ifndef GLX_RGBA_TYPE
#  define GLX_RGBA_TYPE 0x8014
#endif
#ifndef GLX_COLOR_INDEX_TYPE
#  define GLX_COLOR_INDEX_TYPE 0x8015
#endif
#ifndef GLX_MAX_PBUFFER_WIDTH
#  define GLX_MAX_PBUFFER_WIDTH 0x8016
#endif
#ifndef GLX_MAX_PBUFFER_HEIGHT
#  define GLX_MAX_PBUFFER_HEIGHT 0x8017
#endif
#ifndef GLX_MAX_PBUFFER_PIXELS
#  define GLX_MAX_PBUFFER_PIXELS 0x8018
#endif
#ifndef GLX_PRESERVED_CONTENTS
#  define GLX_PRESERVED_CONTENTS 0x801B
#endif
#ifndef GLX_LARGEST_PBUFFER
#  define GLX_LARGEST_PBUFFER 0x801C
#endif
#ifndef GLX_WIDTH
#  define GLX_WIDTH 0x801D
#endif
#ifndef GLX_HEIGHT
#  define GLX_HEIGHT 0x801E
#endif
#ifndef GLX_EVENT_MASK
#  define GLX_EVENT_MASK 0x801F
#endif
#ifndef GLX_DAMAGED
#  define GLX_DAMAGED 0x8020
#endif
#ifndef GLX_SAVED
#  define GLX_SAVED 0x8021
#endif
#ifndef GLX_WINDOW
#  define GLX_WINDOW 0x8022
#endif
#ifndef GLX_PBUFFER
#  define GLX_PBUFFER 0x8023
#endif
#ifndef GLX_PBUFFER_HEIGHT
#  define GLX_PBUFFER_HEIGHT 0x8040
#endif
#ifndef GLX_PBUFFER_WIDTH
#  define GLX_PBUFFER_WIDTH 0x8041
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glXGetFBConfigs
typedef GLXFBConfig * (APIENTRYP PFNXGLUXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
typedef GLXFBConfig * (APIENTRYP PFNXGLUXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
typedef int (APIENTRYP PFNXGLUXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
typedef XVisualInfo * (APIENTRYP PFNXGLUXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
typedef GLXWindow (APIENTRYP PFNXGLUXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
typedef void (APIENTRYP PFNXGLUXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
typedef GLXPixmap (APIENTRYP PFNXGLUXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
typedef void (APIENTRYP PFNXGLUXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
typedef GLXPbuffer (APIENTRYP PFNXGLUXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
typedef void (APIENTRYP PFNXGLUXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
typedef void (APIENTRYP PFNXGLUXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
typedef GLXContext (APIENTRYP PFNXGLUXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
typedef Bool (APIENTRYP PFNXGLUXMAKECONTEXTCURRENTPROC) (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
typedef GLXDrawable (APIENTRYP PFNXGLUXGETCURRENTREADDRAWABLEPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
typedef Display * (APIENTRYP PFNXGLUXGETCURRENTDISPLAYPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
typedef int (APIENTRYP PFNXGLUXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
typedef void (APIENTRYP PFNXGLUXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
typedef void (APIENTRYP PFNXGLUXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glXGetFBConfigs
extern PFNXGLUXGETFBCONFIGSPROC glXGetFBConfigs;
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
extern PFNXGLUXCHOOSEFBCONFIGPROC glXChooseFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
extern PFNXGLUXGETFBCONFIGATTRIBPROC glXGetFBConfigAttrib;
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
extern PFNXGLUXGETVISUALFROMFBCONFIGPROC glXGetVisualFromFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
extern PFNXGLUXCREATEWINDOWPROC glXCreateWindow;
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
extern PFNXGLUXDESTROYWINDOWPROC glXDestroyWindow;
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
extern PFNXGLUXCREATEPIXMAPPROC glXCreatePixmap;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
extern PFNXGLUXDESTROYPIXMAPPROC glXDestroyPixmap;
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
extern PFNXGLUXCREATEPBUFFERPROC glXCreatePbuffer;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
extern PFNXGLUXDESTROYPBUFFERPROC glXDestroyPbuffer;
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
extern PFNXGLUXQUERYDRAWABLEPROC glXQueryDrawable;
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
extern PFNXGLUXCREATENEWCONTEXTPROC glXCreateNewContext;
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
extern PFNXGLUXMAKECONTEXTCURRENTPROC glXMakeContextCurrent;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
extern PFNXGLUXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
extern PFNXGLUXGETCURRENTDISPLAYPROC glXGetCurrentDisplay;
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
extern PFNXGLUXQUERYCONTEXTPROC glXQueryContext;
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
extern PFNXGLUXSELECTEVENTPROC glXSelectEvent;
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
extern PFNXGLUXGETSELECTEDEVENTPROC glXGetSelectedEvent;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Jun 19 23:10:01 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GLX_VERSION_1_3__
#define __GLUX_GLX_VERSION_1_3__

GLUX_NEW_PLUGIN(GLX_VERSION_1_3);
// --------------------------------------------------------
#if !(defined WIN32 || defined __APPLE__)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GLX_WINDOW_BIT
#  define GLX_WINDOW_BIT 0x00000001
#endif
#ifndef GLX_PIXMAP_BIT
#  define GLX_PIXMAP_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_BIT
#  define GLX_PBUFFER_BIT 0x00000004
#endif
#ifndef GLX_RGBA_BIT
#  define GLX_RGBA_BIT 0x00000001
#endif
#ifndef GLX_COLOR_INDEX_BIT
#  define GLX_COLOR_INDEX_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_CLOBBER_MASK
#  define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#endif
#ifndef GLX_FRONT_LEFT_BUFFER_BIT
#  define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#endif
#ifndef GLX_FRONT_RIGHT_BUFFER_BIT
#  define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#endif
#ifndef GLX_BACK_LEFT_BUFFER_BIT
#  define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#endif
#ifndef GLX_BACK_RIGHT_BUFFER_BIT
#  define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#endif
#ifndef GLX_AUX_BUFFERS_BIT
#  define GLX_AUX_BUFFERS_BIT 0x00000010
#endif
#ifndef GLX_DEPTH_BUFFER_BIT
#  define GLX_DEPTH_BUFFER_BIT 0x00000020
#endif
#ifndef GLX_STENCIL_BUFFER_BIT
#  define GLX_STENCIL_BUFFER_BIT 0x00000040
#endif
#ifndef GLX_ACCUM_BUFFER_BIT
#  define GLX_ACCUM_BUFFER_BIT 0x00000080
#endif
#ifndef GLX_CONFIG_CAVEAT
#  define GLX_CONFIG_CAVEAT 0x20
#endif
#ifndef GLX_X_VISUAL_TYPE
#  define GLX_X_VISUAL_TYPE 0x22
#endif
#ifndef GLX_TRANSPARENT_TYPE
#  define GLX_TRANSPARENT_TYPE 0x23
#endif
#ifndef GLX_TRANSPARENT_INDEX_VALUE
#  define GLX_TRANSPARENT_INDEX_VALUE 0x24
#endif
#ifndef GLX_TRANSPARENT_RED_VALUE
#  define GLX_TRANSPARENT_RED_VALUE 0x25
#endif
#ifndef GLX_TRANSPARENT_GREEN_VALUE
#  define GLX_TRANSPARENT_GREEN_VALUE 0x26
#endif
#ifndef GLX_TRANSPARENT_BLUE_VALUE
#  define GLX_TRANSPARENT_BLUE_VALUE 0x27
#endif
#ifndef GLX_TRANSPARENT_ALPHA_VALUE
#  define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#endif
#ifndef GLX_DONT_CARE
#  define GLX_DONT_CARE 0xFFFFFFFF
#endif
#ifndef GLX_NONE
#  define GLX_NONE 0x8000
#endif
#ifndef GLX_SLOW_CONFIG
#  define GLX_SLOW_CONFIG 0x8001
#endif
#ifndef GLX_TRUE_COLOR
#  define GLX_TRUE_COLOR 0x8002
#endif
#ifndef GLX_DIRECT_COLOR
#  define GLX_DIRECT_COLOR 0x8003
#endif
#ifndef GLX_PSEUDO_COLOR
#  define GLX_PSEUDO_COLOR 0x8004
#endif
#ifndef GLX_STATIC_COLOR
#  define GLX_STATIC_COLOR 0x8005
#endif
#ifndef GLX_GRAY_SCALE
#  define GLX_GRAY_SCALE 0x8006
#endif
#ifndef GLX_STATIC_GRAY
#  define GLX_STATIC_GRAY 0x8007
#endif
#ifndef GLX_TRANSPARENT_RGB
#  define GLX_TRANSPARENT_RGB 0x8008
#endif
#ifndef GLX_TRANSPARENT_INDEX
#  define GLX_TRANSPARENT_INDEX 0x8009
#endif
#ifndef GLX_VISUAL_ID
#  define GLX_VISUAL_ID 0x800B
#endif
#ifndef GLX_SCREEN
#  define GLX_SCREEN 0x800C
#endif
#ifndef GLX_NON_CONFORMANT_CONFIG
#  define GLX_NON_CONFORMANT_CONFIG 0x800D
#endif
#ifndef GLX_DRAWABLE_TYPE
#  define GLX_DRAWABLE_TYPE 0x8010
#endif
#ifndef GLX_RENDER_TYPE
#  define GLX_RENDER_TYPE 0x8011
#endif
#ifndef GLX_X_RENDERABLE
#  define GLX_X_RENDERABLE 0x8012
#endif
#ifndef GLX_FBCONFIG_ID
#  define GLX_FBCONFIG_ID 0x8013
#endif
#ifndef GLX_RGBA_TYPE
#  define GLX_RGBA_TYPE 0x8014
#endif
#ifndef GLX_COLOR_INDEX_TYPE
#  define GLX_COLOR_INDEX_TYPE 0x8015
#endif
#ifndef GLX_MAX_PBUFFER_WIDTH
#  define GLX_MAX_PBUFFER_WIDTH 0x8016
#endif
#ifndef GLX_MAX_PBUFFER_HEIGHT
#  define GLX_MAX_PBUFFER_HEIGHT 0x8017
#endif
#ifndef GLX_MAX_PBUFFER_PIXELS
#  define GLX_MAX_PBUFFER_PIXELS 0x8018
#endif
#ifndef GLX_PRESERVED_CONTENTS
#  define GLX_PRESERVED_CONTENTS 0x801B
#endif
#ifndef GLX_LARGEST_PBUFFER
#  define GLX_LARGEST_PBUFFER 0x801C
#endif
#ifndef GLX_WIDTH
#  define GLX_WIDTH 0x801D
#endif
#ifndef GLX_HEIGHT
#  define GLX_HEIGHT 0x801E
#endif
#ifndef GLX_EVENT_MASK
#  define GLX_EVENT_MASK 0x801F
#endif
#ifndef GLX_DAMAGED
#  define GLX_DAMAGED 0x8020
#endif
#ifndef GLX_SAVED
#  define GLX_SAVED 0x8021
#endif
#ifndef GLX_WINDOW
#  define GLX_WINDOW 0x8022
#endif
#ifndef GLX_PBUFFER
#  define GLX_PBUFFER 0x8023
#endif
#ifndef GLX_PBUFFER_HEIGHT
#  define GLX_PBUFFER_HEIGHT 0x8040
#endif
#ifndef GLX_PBUFFER_WIDTH
#  define GLX_PBUFFER_WIDTH 0x8041
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glXGetFBConfigs
typedef GLXFBConfig * (APIENTRYP PFNXGLUXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
typedef GLXFBConfig * (APIENTRYP PFNXGLUXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
typedef int (APIENTRYP PFNXGLUXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
typedef XVisualInfo * (APIENTRYP PFNXGLUXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
typedef GLXWindow (APIENTRYP PFNXGLUXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
typedef void (APIENTRYP PFNXGLUXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
typedef GLXPixmap (APIENTRYP PFNXGLUXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
typedef void (APIENTRYP PFNXGLUXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
typedef GLXPbuffer (APIENTRYP PFNXGLUXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
typedef void (APIENTRYP PFNXGLUXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
typedef void (APIENTRYP PFNXGLUXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
typedef GLXContext (APIENTRYP PFNXGLUXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
typedef Bool (APIENTRYP PFNXGLUXMAKECONTEXTCURRENTPROC) (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
typedef GLXDrawable (APIENTRYP PFNXGLUXGETCURRENTREADDRAWABLEPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
typedef Display * (APIENTRYP PFNXGLUXGETCURRENTDISPLAYPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
typedef int (APIENTRYP PFNXGLUXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
typedef void (APIENTRYP PFNXGLUXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
typedef void (APIENTRYP PFNXGLUXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glXGetFBConfigs
extern PFNXGLUXGETFBCONFIGSPROC glXGetFBConfigs;
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
extern PFNXGLUXCHOOSEFBCONFIGPROC glXChooseFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
extern PFNXGLUXGETFBCONFIGATTRIBPROC glXGetFBConfigAttrib;
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
extern PFNXGLUXGETVISUALFROMFBCONFIGPROC glXGetVisualFromFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
extern PFNXGLUXCREATEWINDOWPROC glXCreateWindow;
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
extern PFNXGLUXDESTROYWINDOWPROC glXDestroyWindow;
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
extern PFNXGLUXCREATEPIXMAPPROC glXCreatePixmap;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
extern PFNXGLUXDESTROYPIXMAPPROC glXDestroyPixmap;
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
extern PFNXGLUXCREATEPBUFFERPROC glXCreatePbuffer;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
extern PFNXGLUXDESTROYPBUFFERPROC glXDestroyPbuffer;
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
extern PFNXGLUXQUERYDRAWABLEPROC glXQueryDrawable;
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
extern PFNXGLUXCREATENEWCONTEXTPROC glXCreateNewContext;
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
extern PFNXGLUXMAKECONTEXTCURRENTPROC glXMakeContextCurrent;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
extern PFNXGLUXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
extern PFNXGLUXGETCURRENTDISPLAYPROC glXGetCurrentDisplay;
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
extern PFNXGLUXQUERYCONTEXTPROC glXQueryContext;
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
extern PFNXGLUXSELECTEVENTPROC glXSelectEvent;
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
extern PFNXGLUXGETSELECTEDEVENTPROC glXGetSelectedEvent;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Jul 30 07:20:02 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GLX_VERSION_1_3__
#define __GLUX_GLX_VERSION_1_3__

GLUX_NEW_PLUGIN(GLX_VERSION_1_3);
// --------------------------------------------------------
#if !(defined WIN32 || defined __APPLE__)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GLX_WINDOW_BIT
#  define GLX_WINDOW_BIT 0x00000001
#endif
#ifndef GLX_PIXMAP_BIT
#  define GLX_PIXMAP_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_BIT
#  define GLX_PBUFFER_BIT 0x00000004
#endif
#ifndef GLX_RGBA_BIT
#  define GLX_RGBA_BIT 0x00000001
#endif
#ifndef GLX_COLOR_INDEX_BIT
#  define GLX_COLOR_INDEX_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_CLOBBER_MASK
#  define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#endif
#ifndef GLX_FRONT_LEFT_BUFFER_BIT
#  define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#endif
#ifndef GLX_FRONT_RIGHT_BUFFER_BIT
#  define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#endif
#ifndef GLX_BACK_LEFT_BUFFER_BIT
#  define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#endif
#ifndef GLX_BACK_RIGHT_BUFFER_BIT
#  define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#endif
#ifndef GLX_AUX_BUFFERS_BIT
#  define GLX_AUX_BUFFERS_BIT 0x00000010
#endif
#ifndef GLX_DEPTH_BUFFER_BIT
#  define GLX_DEPTH_BUFFER_BIT 0x00000020
#endif
#ifndef GLX_STENCIL_BUFFER_BIT
#  define GLX_STENCIL_BUFFER_BIT 0x00000040
#endif
#ifndef GLX_ACCUM_BUFFER_BIT
#  define GLX_ACCUM_BUFFER_BIT 0x00000080
#endif
#ifndef GLX_CONFIG_CAVEAT
#  define GLX_CONFIG_CAVEAT 0x20
#endif
#ifndef GLX_X_VISUAL_TYPE
#  define GLX_X_VISUAL_TYPE 0x22
#endif
#ifndef GLX_TRANSPARENT_TYPE
#  define GLX_TRANSPARENT_TYPE 0x23
#endif
#ifndef GLX_TRANSPARENT_INDEX_VALUE
#  define GLX_TRANSPARENT_INDEX_VALUE 0x24
#endif
#ifndef GLX_TRANSPARENT_RED_VALUE
#  define GLX_TRANSPARENT_RED_VALUE 0x25
#endif
#ifndef GLX_TRANSPARENT_GREEN_VALUE
#  define GLX_TRANSPARENT_GREEN_VALUE 0x26
#endif
#ifndef GLX_TRANSPARENT_BLUE_VALUE
#  define GLX_TRANSPARENT_BLUE_VALUE 0x27
#endif
#ifndef GLX_TRANSPARENT_ALPHA_VALUE
#  define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#endif
#ifndef GLX_DONT_CARE
#  define GLX_DONT_CARE 0xFFFFFFFF
#endif
#ifndef GLX_NONE
#  define GLX_NONE 0x8000
#endif
#ifndef GLX_SLOW_CONFIG
#  define GLX_SLOW_CONFIG 0x8001
#endif
#ifndef GLX_TRUE_COLOR
#  define GLX_TRUE_COLOR 0x8002
#endif
#ifndef GLX_DIRECT_COLOR
#  define GLX_DIRECT_COLOR 0x8003
#endif
#ifndef GLX_PSEUDO_COLOR
#  define GLX_PSEUDO_COLOR 0x8004
#endif
#ifndef GLX_STATIC_COLOR
#  define GLX_STATIC_COLOR 0x8005
#endif
#ifndef GLX_GRAY_SCALE
#  define GLX_GRAY_SCALE 0x8006
#endif
#ifndef GLX_STATIC_GRAY
#  define GLX_STATIC_GRAY 0x8007
#endif
#ifndef GLX_TRANSPARENT_RGB
#  define GLX_TRANSPARENT_RGB 0x8008
#endif
#ifndef GLX_TRANSPARENT_INDEX
#  define GLX_TRANSPARENT_INDEX 0x8009
#endif
#ifndef GLX_VISUAL_ID
#  define GLX_VISUAL_ID 0x800B
#endif
#ifndef GLX_SCREEN
#  define GLX_SCREEN 0x800C
#endif
#ifndef GLX_NON_CONFORMANT_CONFIG
#  define GLX_NON_CONFORMANT_CONFIG 0x800D
#endif
#ifndef GLX_DRAWABLE_TYPE
#  define GLX_DRAWABLE_TYPE 0x8010
#endif
#ifndef GLX_RENDER_TYPE
#  define GLX_RENDER_TYPE 0x8011
#endif
#ifndef GLX_X_RENDERABLE
#  define GLX_X_RENDERABLE 0x8012
#endif
#ifndef GLX_FBCONFIG_ID
#  define GLX_FBCONFIG_ID 0x8013
#endif
#ifndef GLX_RGBA_TYPE
#  define GLX_RGBA_TYPE 0x8014
#endif
#ifndef GLX_COLOR_INDEX_TYPE
#  define GLX_COLOR_INDEX_TYPE 0x8015
#endif
#ifndef GLX_MAX_PBUFFER_WIDTH
#  define GLX_MAX_PBUFFER_WIDTH 0x8016
#endif
#ifndef GLX_MAX_PBUFFER_HEIGHT
#  define GLX_MAX_PBUFFER_HEIGHT 0x8017
#endif
#ifndef GLX_MAX_PBUFFER_PIXELS
#  define GLX_MAX_PBUFFER_PIXELS 0x8018
#endif
#ifndef GLX_PRESERVED_CONTENTS
#  define GLX_PRESERVED_CONTENTS 0x801B
#endif
#ifndef GLX_LARGEST_PBUFFER
#  define GLX_LARGEST_PBUFFER 0x801C
#endif
#ifndef GLX_WIDTH
#  define GLX_WIDTH 0x801D
#endif
#ifndef GLX_HEIGHT
#  define GLX_HEIGHT 0x801E
#endif
#ifndef GLX_EVENT_MASK
#  define GLX_EVENT_MASK 0x801F
#endif
#ifndef GLX_DAMAGED
#  define GLX_DAMAGED 0x8020
#endif
#ifndef GLX_SAVED
#  define GLX_SAVED 0x8021
#endif
#ifndef GLX_WINDOW
#  define GLX_WINDOW 0x8022
#endif
#ifndef GLX_PBUFFER
#  define GLX_PBUFFER 0x8023
#endif
#ifndef GLX_PBUFFER_HEIGHT
#  define GLX_PBUFFER_HEIGHT 0x8040
#endif
#ifndef GLX_PBUFFER_WIDTH
#  define GLX_PBUFFER_WIDTH 0x8041
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glXGetFBConfigs
typedef GLXFBConfig * (APIENTRYP PFNXGLUXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
typedef GLXFBConfig * (APIENTRYP PFNXGLUXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
typedef int (APIENTRYP PFNXGLUXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
typedef XVisualInfo * (APIENTRYP PFNXGLUXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
typedef GLXWindow (APIENTRYP PFNXGLUXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
typedef void (APIENTRYP PFNXGLUXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
typedef GLXPixmap (APIENTRYP PFNXGLUXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
typedef void (APIENTRYP PFNXGLUXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
typedef GLXPbuffer (APIENTRYP PFNXGLUXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
typedef void (APIENTRYP PFNXGLUXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
typedef void (APIENTRYP PFNXGLUXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
typedef GLXContext (APIENTRYP PFNXGLUXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
typedef Bool (APIENTRYP PFNXGLUXMAKECONTEXTCURRENTPROC) (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
typedef GLXDrawable (APIENTRYP PFNXGLUXGETCURRENTREADDRAWABLEPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
typedef Display * (APIENTRYP PFNXGLUXGETCURRENTDISPLAYPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
typedef int (APIENTRYP PFNXGLUXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
typedef void (APIENTRYP PFNXGLUXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
typedef void (APIENTRYP PFNXGLUXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glXGetFBConfigs
extern PFNXGLUXGETFBCONFIGSPROC glXGetFBConfigs;
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
extern PFNXGLUXCHOOSEFBCONFIGPROC glXChooseFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
extern PFNXGLUXGETFBCONFIGATTRIBPROC glXGetFBConfigAttrib;
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
extern PFNXGLUXGETVISUALFROMFBCONFIGPROC glXGetVisualFromFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
extern PFNXGLUXCREATEWINDOWPROC glXCreateWindow;
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
extern PFNXGLUXDESTROYWINDOWPROC glXDestroyWindow;
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
extern PFNXGLUXCREATEPIXMAPPROC glXCreatePixmap;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
extern PFNXGLUXDESTROYPIXMAPPROC glXDestroyPixmap;
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
extern PFNXGLUXCREATEPBUFFERPROC glXCreatePbuffer;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
extern PFNXGLUXDESTROYPBUFFERPROC glXDestroyPbuffer;
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
extern PFNXGLUXQUERYDRAWABLEPROC glXQueryDrawable;
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
extern PFNXGLUXCREATENEWCONTEXTPROC glXCreateNewContext;
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
extern PFNXGLUXMAKECONTEXTCURRENTPROC glXMakeContextCurrent;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
extern PFNXGLUXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
extern PFNXGLUXGETCURRENTDISPLAYPROC glXGetCurrentDisplay;
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
extern PFNXGLUXQUERYCONTEXTPROC glXQueryContext;
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
extern PFNXGLUXSELECTEVENTPROC glXSelectEvent;
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
extern PFNXGLUXGETSELECTEDEVENTPROC glXGetSelectedEvent;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Mon Feb 23 17:43:01 2015)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_apple_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GLX_VERSION_1_3__
#define __GLUX_GLX_VERSION_1_3__

GLUX_NEW_PLUGIN(GLX_VERSION_1_3)
// --------------------------------------------------------
#if !(defined WIN32 || defined __APPLE__)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GLX_WINDOW_BIT
#  define GLX_WINDOW_BIT 0x00000001
#endif
#ifndef GLX_PIXMAP_BIT
#  define GLX_PIXMAP_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_BIT
#  define GLX_PBUFFER_BIT 0x00000004
#endif
#ifndef GLX_RGBA_BIT
#  define GLX_RGBA_BIT 0x00000001
#endif
#ifndef GLX_COLOR_INDEX_BIT
#  define GLX_COLOR_INDEX_BIT 0x00000002
#endif
#ifndef GLX_PBUFFER_CLOBBER_MASK
#  define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#endif
#ifndef GLX_FRONT_LEFT_BUFFER_BIT
#  define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#endif
#ifndef GLX_FRONT_RIGHT_BUFFER_BIT
#  define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#endif
#ifndef GLX_BACK_LEFT_BUFFER_BIT
#  define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#endif
#ifndef GLX_BACK_RIGHT_BUFFER_BIT
#  define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#endif
#ifndef GLX_AUX_BUFFERS_BIT
#  define GLX_AUX_BUFFERS_BIT 0x00000010
#endif
#ifndef GLX_DEPTH_BUFFER_BIT
#  define GLX_DEPTH_BUFFER_BIT 0x00000020
#endif
#ifndef GLX_STENCIL_BUFFER_BIT
#  define GLX_STENCIL_BUFFER_BIT 0x00000040
#endif
#ifndef GLX_ACCUM_BUFFER_BIT
#  define GLX_ACCUM_BUFFER_BIT 0x00000080
#endif
#ifndef GLX_CONFIG_CAVEAT
#  define GLX_CONFIG_CAVEAT 0x20
#endif
#ifndef GLX_X_VISUAL_TYPE
#  define GLX_X_VISUAL_TYPE 0x22
#endif
#ifndef GLX_TRANSPARENT_TYPE
#  define GLX_TRANSPARENT_TYPE 0x23
#endif
#ifndef GLX_TRANSPARENT_INDEX_VALUE
#  define GLX_TRANSPARENT_INDEX_VALUE 0x24
#endif
#ifndef GLX_TRANSPARENT_RED_VALUE
#  define GLX_TRANSPARENT_RED_VALUE 0x25
#endif
#ifndef GLX_TRANSPARENT_GREEN_VALUE
#  define GLX_TRANSPARENT_GREEN_VALUE 0x26
#endif
#ifndef GLX_TRANSPARENT_BLUE_VALUE
#  define GLX_TRANSPARENT_BLUE_VALUE 0x27
#endif
#ifndef GLX_TRANSPARENT_ALPHA_VALUE
#  define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#endif
#ifndef GLX_DONT_CARE
#  define GLX_DONT_CARE 0xFFFFFFFF
#endif
#ifndef GLX_NONE
#  define GLX_NONE 0x8000
#endif
#ifndef GLX_SLOW_CONFIG
#  define GLX_SLOW_CONFIG 0x8001
#endif
#ifndef GLX_TRUE_COLOR
#  define GLX_TRUE_COLOR 0x8002
#endif
#ifndef GLX_DIRECT_COLOR
#  define GLX_DIRECT_COLOR 0x8003
#endif
#ifndef GLX_PSEUDO_COLOR
#  define GLX_PSEUDO_COLOR 0x8004
#endif
#ifndef GLX_STATIC_COLOR
#  define GLX_STATIC_COLOR 0x8005
#endif
#ifndef GLX_GRAY_SCALE
#  define GLX_GRAY_SCALE 0x8006
#endif
#ifndef GLX_STATIC_GRAY
#  define GLX_STATIC_GRAY 0x8007
#endif
#ifndef GLX_TRANSPARENT_RGB
#  define GLX_TRANSPARENT_RGB 0x8008
#endif
#ifndef GLX_TRANSPARENT_INDEX
#  define GLX_TRANSPARENT_INDEX 0x8009
#endif
#ifndef GLX_VISUAL_ID
#  define GLX_VISUAL_ID 0x800B
#endif
#ifndef GLX_SCREEN
#  define GLX_SCREEN 0x800C
#endif
#ifndef GLX_NON_CONFORMANT_CONFIG
#  define GLX_NON_CONFORMANT_CONFIG 0x800D
#endif
#ifndef GLX_DRAWABLE_TYPE
#  define GLX_DRAWABLE_TYPE 0x8010
#endif
#ifndef GLX_RENDER_TYPE
#  define GLX_RENDER_TYPE 0x8011
#endif
#ifndef GLX_X_RENDERABLE
#  define GLX_X_RENDERABLE 0x8012
#endif
#ifndef GLX_FBCONFIG_ID
#  define GLX_FBCONFIG_ID 0x8013
#endif
#ifndef GLX_RGBA_TYPE
#  define GLX_RGBA_TYPE 0x8014
#endif
#ifndef GLX_COLOR_INDEX_TYPE
#  define GLX_COLOR_INDEX_TYPE 0x8015
#endif
#ifndef GLX_MAX_PBUFFER_WIDTH
#  define GLX_MAX_PBUFFER_WIDTH 0x8016
#endif
#ifndef GLX_MAX_PBUFFER_HEIGHT
#  define GLX_MAX_PBUFFER_HEIGHT 0x8017
#endif
#ifndef GLX_MAX_PBUFFER_PIXELS
#  define GLX_MAX_PBUFFER_PIXELS 0x8018
#endif
#ifndef GLX_PRESERVED_CONTENTS
#  define GLX_PRESERVED_CONTENTS 0x801B
#endif
#ifndef GLX_LARGEST_PBUFFER
#  define GLX_LARGEST_PBUFFER 0x801C
#endif
#ifndef GLX_WIDTH
#  define GLX_WIDTH 0x801D
#endif
#ifndef GLX_HEIGHT
#  define GLX_HEIGHT 0x801E
#endif
#ifndef GLX_EVENT_MASK
#  define GLX_EVENT_MASK 0x801F
#endif
#ifndef GLX_DAMAGED
#  define GLX_DAMAGED 0x8020
#endif
#ifndef GLX_SAVED
#  define GLX_SAVED 0x8021
#endif
#ifndef GLX_WINDOW
#  define GLX_WINDOW 0x8022
#endif
#ifndef GLX_PBUFFER
#  define GLX_PBUFFER 0x8023
#endif
#ifndef GLX_PBUFFER_HEIGHT
#  define GLX_PBUFFER_HEIGHT 0x8040
#endif
#ifndef GLX_PBUFFER_WIDTH
#  define GLX_PBUFFER_WIDTH 0x8041
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glXGetFBConfigs
typedef GLXFBConfig * (APIENTRYP PFNXGLUXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
typedef GLXFBConfig * (APIENTRYP PFNXGLUXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
typedef int (APIENTRYP PFNXGLUXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
typedef XVisualInfo * (APIENTRYP PFNXGLUXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
typedef GLXWindow (APIENTRYP PFNXGLUXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
typedef void (APIENTRYP PFNXGLUXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
typedef GLXPixmap (APIENTRYP PFNXGLUXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
typedef void (APIENTRYP PFNXGLUXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
typedef GLXPbuffer (APIENTRYP PFNXGLUXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
typedef void (APIENTRYP PFNXGLUXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
typedef void (APIENTRYP PFNXGLUXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
typedef GLXContext (APIENTRYP PFNXGLUXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
typedef Bool (APIENTRYP PFNXGLUXMAKECONTEXTCURRENTPROC) (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
typedef GLXDrawable (APIENTRYP PFNXGLUXGETCURRENTREADDRAWABLEPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
typedef Display * (APIENTRYP PFNXGLUXGETCURRENTDISPLAYPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
typedef int (APIENTRYP PFNXGLUXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
typedef void (APIENTRYP PFNXGLUXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
typedef void (APIENTRYP PFNXGLUXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glXGetFBConfigs
extern PFNXGLUXGETFBCONFIGSPROC glXGetFBConfigs;
#endif
#ifndef __GLUX__GLFCT_glXChooseFBConfig
extern PFNXGLUXCHOOSEFBCONFIGPROC glXChooseFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXGetFBConfigAttrib
extern PFNXGLUXGETFBCONFIGATTRIBPROC glXGetFBConfigAttrib;
#endif
#ifndef __GLUX__GLFCT_glXGetVisualFromFBConfig
extern PFNXGLUXGETVISUALFROMFBCONFIGPROC glXGetVisualFromFBConfig;
#endif
#ifndef __GLUX__GLFCT_glXCreateWindow
extern PFNXGLUXCREATEWINDOWPROC glXCreateWindow;
#endif
#ifndef __GLUX__GLFCT_glXDestroyWindow
extern PFNXGLUXDESTROYWINDOWPROC glXDestroyWindow;
#endif
#ifndef __GLUX__GLFCT_glXCreatePixmap
extern PFNXGLUXCREATEPIXMAPPROC glXCreatePixmap;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPixmap
extern PFNXGLUXDESTROYPIXMAPPROC glXDestroyPixmap;
#endif
#ifndef __GLUX__GLFCT_glXCreatePbuffer
extern PFNXGLUXCREATEPBUFFERPROC glXCreatePbuffer;
#endif
#ifndef __GLUX__GLFCT_glXDestroyPbuffer
extern PFNXGLUXDESTROYPBUFFERPROC glXDestroyPbuffer;
#endif
#ifndef __GLUX__GLFCT_glXQueryDrawable
extern PFNXGLUXQUERYDRAWABLEPROC glXQueryDrawable;
#endif
#ifndef __GLUX__GLFCT_glXCreateNewContext
extern PFNXGLUXCREATENEWCONTEXTPROC glXCreateNewContext;
#endif
#ifndef __GLUX__GLFCT_glXMakeContextCurrent
extern PFNXGLUXMAKECONTEXTCURRENTPROC glXMakeContextCurrent;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentReadDrawable
extern PFNXGLUXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable;
#endif
#ifndef __GLUX__GLFCT_glXGetCurrentDisplay
extern PFNXGLUXGETCURRENTDISPLAYPROC glXGetCurrentDisplay;
#endif
#ifndef __GLUX__GLFCT_glXQueryContext
extern PFNXGLUXQUERYCONTEXTPROC glXQueryContext;
#endif
#ifndef __GLUX__GLFCT_glXSelectEvent
extern PFNXGLUXSELECTEVENTPROC glXSelectEvent;
#endif
#ifndef __GLUX__GLFCT_glXGetSelectedEvent
extern PFNXGLUXGETSELECTEDEVENTPROC glXGetSelectedEvent;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
#endif
// --------------------------------------------------------
