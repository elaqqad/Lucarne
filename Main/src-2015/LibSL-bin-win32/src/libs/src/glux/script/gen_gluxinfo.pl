#! /usr/bin/perl

print "-=-=-=- Parsing extension files (./src) -=-=-=-\n";

$srcdir=shift;

open(OUTPUT,">"."$srcdir/../gluxinfo/gluxinfo.cpp") or die "[glux script] Can't open file $srcdir/../gluxinfo/gluxinfo.cpp";

$date=localtime;

print OUTPUT "
// --------------------------------------------------------
// GLUX INFO - list available OpenGL extensions
// 
// same as glxinfo but also runs on windows :)
//
// Generated by glux perl script ($date)
// 
// Sylvain Lefebvre - 2002,2011 - Sylvain.Lefebvre\@imag.fr
// --------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
#include <glux.h>
#include <LibSL/LibSL.h>
#include <LibSL/LibSL_gl.h>
// --------------------------------------------------------
";

$exts=`ls -C1 $srcdir/glux_GL_*.h`;
@allexts=sort(split(/\s/,$exts));
foreach $ext (@allexts)
{
  if ($ext=~/.*glux_GL_(.*)\.h/)
  {
    # print "GL_".$1."\n";
    print OUTPUT "#include \"GL_".$1.".h\"\n";
    print OUTPUT "GLUX_LOAD(GL_".$1.");\n";
  }
}

$exts=`ls -C1 $srcdir/glux_WGL_*.h`;
@allexts=sort(split(/\s/,$exts));
print OUTPUT "#ifdef WIN32\n";
foreach $ext (@allexts)
{
  if ($ext=~/.*glux_WGL_(.*)\.h/)
  {
    # print "WGL_".$1."\n";
    print OUTPUT "#include \"WGL_".$1.".h\"\n";
    print OUTPUT "GLUX_LOAD(WGL_".$1.");\n";
  }
}
print OUTPUT "#endif\n";

$exts=`ls -C1 $srcdir/glux_GLX_*.h`;
@allexts=sort(split(/\s/,$exts));
print OUTPUT "#ifndef WIN32\n";
foreach $ext (@allexts)
{
  if ($ext=~/.*glux_GLX_(.*)\.h/)
  {
    # print "GLX_".$1."\n";
    print OUTPUT "#include \"GLX_".$1.".h\"\n";
    print OUTPUT "GLUX_LOAD(GLX_".$1.");\n";
  }
}
print OUTPUT "#endif\n";

print OUTPUT "
// --------------------------------------------------------
int main(int argc,char **argv)
{
  // init openGL
  SimpleUI::init(256,256);

  std::cout << \"[gluX info] Installed hardware:\" << std::endl;
  std::cout << \" Vendor   : \" << glGetString(GL_VENDOR)   << std::endl;
  std::cout << \" Renderer : \" << glGetString(GL_RENDERER) << std::endl;
  std::cout << \" Version  : \" << glGetString(GL_VERSION) << std::endl;
  std::cout << std::endl;

  std::string profile_name;
  profile_name = std::string(\"glux_profile#\") + (const char *)glGetString(GL_RENDERER) + \"#\" + (const char *)glGetString(GL_VERSION);
#ifdef WIN32
  profile_name += \"#Windows\";
#else
  profile_name += \"#Linux\";
#endif

  for (int l=0;l<(int)profile_name.length();l++) {
    if (profile_name[l] == '/')
      profile_name[l]='_';
  }

  std::ofstream profile(profile_name.c_str());
  if (!profile)
    std::cerr << \"[gluX info] ERROR: Cannot write profile into file\\n   \"
	      << profile_name << std::endl;

  profile << \"# Vendor   :\" << glGetString(GL_VENDOR) << std::endl;
  profile << \"# Renderer :\" << glGetString(GL_RENDERER) << std::endl;
  profile << \"# Version  :\" << glGetString(GL_VERSION) << std::endl;
#ifdef WIN32
  profile << \"# Windows\" << std::endl;
#else
  profile << \"# Linux\" << std::endl;
#endif
  for (int n=0;n<GLUX_NUMBER_OF_EXTENSIONS;n++) {
    if (gluxIsAvailable(GLUX_EXTENSION(n))) {
	profile << GLUX_EXTENSION(n) << std::endl;      
    }
  }

  std::cout << std::endl << \"Thank you for using gluX\" << std::endl;
  
  SimpleUI::shutdown();
  
  return (0);
}
// --------------------------------------------------------
";

close(OUTPUT);
