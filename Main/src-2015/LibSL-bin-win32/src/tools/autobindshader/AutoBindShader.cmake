FIND_PACKAGE(PythonInterp)
SET(PYTHON3_EXECUTABLE ${PYTHON_EXECUTABLE} CACHE INTERNAL "")

#FIND_PROGRAM(PYTHON3_EXECUTABLE
#  NAMES python.exe
#  PATHS
#  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.0\\InstallPath]
#  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.1\\InstallPath]
#  )

IF (NOT AutoBindShader_DIR)
SET(AutoBindShader_DIR ${LibSL_DIR}/src/tools/autobindshader CACHE INTERNAL "")
ENDIF (NOT AutoBindShader_DIR)

MACRO(AUTO_BIND_SHADERS)
	INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR} )
	FOREACH (SHADER ${ARGN})
		IF(IS_ABSOLUTE ${SHADER})
			FILE(GLOB inputs ${SHADER}.* )
		ELSE()
			FILE(GLOB inputs RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}.* )
		ENDIF()
		SEPARATE_ARGUMENTS(inputs)
		MESSAGE("SHADER FILES : ${inputs}")

		# Create a subdirectory if it does not exists already
		IF(CMAKE_VERSION VERSION_LESS 2.8.12)
			GET_FILENAME_COMPONENT(OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/${SHADER}.h PATH)
		ELSE()
			GET_FILENAME_COMPONENT(OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/${SHADER}.h DIRECTORY)
		ENDIF()
		FILE(MAKE_DIRECTORY "${OUTPUT_DIR}")
		INCLUDE_DIRECTORIES( ${OUTPUT_DIR} )

		IF(IS_ABSOLUTE ${SHADER})
			GET_FILENAME_COMPONENT(OUTPUT_FILE ${SHADER}.h NAME)
			ADD_CUSTOM_COMMAND(
							OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_FILE}
							COMMAND ${PYTHON3_EXECUTABLE} ${AutoBindShader_DIR}/autobindshader.py "${SHADER}.fp"
							DEPENDS ${inputs}
							WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
							COMMENT "AutoBindShader")
		ELSE()
			ADD_CUSTOM_COMMAND(
							OUTPUT ${SHADER}.h
							COMMAND ${PYTHON3_EXECUTABLE} ${AutoBindShader_DIR}/autobindshader.py "${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}.fp"
							DEPENDS ${inputs}
							WORKING_DIRECTORY ${OUTPUT_DIR}
							COMMENT "AutoBindShader")
		ENDIF()
		MESSAGE("Adding rule for AutoBindShader <${SHADER}>")
	ENDFOREACH (SHADER)
ENDMACRO(AUTO_BIND_SHADERS)
