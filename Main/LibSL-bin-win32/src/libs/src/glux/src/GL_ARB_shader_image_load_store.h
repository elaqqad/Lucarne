
// --------------------------------------------------------
// Generated by glux perl script (Fri Dec  7 13:47:28 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:47 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:54 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:10:14 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:03:31 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:07:33 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:25:55 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Jan  4 09:29:07 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Feb 14 17:17:07 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Sep  7 15:19:01 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Oct  4 19:23:22 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:02 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:09 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Jan  4 13:28:25 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 18:52:07 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 19:31:51 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan 14 20:41:08 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 09:20:29 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 10:46:26 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sun May 11 20:42:03 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue May 20 01:36:43 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Jun 19 23:10:02 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Jul 30 07:20:03 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Mon Feb 23 17:43:04 2015)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_apple_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_image_load_store__
#define __GLUX_GL_ARB_shader_image_load_store__

GLUX_NEW_PLUGIN(GL_ARB_shader_image_load_store)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#  define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#  define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif
#ifndef GL_UNIFORM_BARRIER_BIT
#  define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#  define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#  define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif
#ifndef GL_COMMAND_BARRIER_BIT
#  define GL_COMMAND_BARRIER_BIT 0x00000040
#endif
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#  define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#  define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#  define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#  define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#  define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#  define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif
#ifndef GL_ALL_BARRIER_BITS
#  define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif
#ifndef GL_MAX_IMAGE_UNITS
#  define GL_MAX_IMAGE_UNITS 0x8F38
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#  define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif
#ifndef GL_IMAGE_BINDING_NAME
#  define GL_IMAGE_BINDING_NAME 0x8F3A
#endif
#ifndef GL_IMAGE_BINDING_LEVEL
#  define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif
#ifndef GL_IMAGE_BINDING_LAYERED
#  define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif
#ifndef GL_IMAGE_BINDING_LAYER
#  define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif
#ifndef GL_IMAGE_BINDING_ACCESS
#  define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif
#ifndef GL_IMAGE_1D
#  define GL_IMAGE_1D 0x904C
#endif
#ifndef GL_IMAGE_2D
#  define GL_IMAGE_2D 0x904D
#endif
#ifndef GL_IMAGE_3D
#  define GL_IMAGE_3D 0x904E
#endif
#ifndef GL_IMAGE_2D_RECT
#  define GL_IMAGE_2D_RECT 0x904F
#endif
#ifndef GL_IMAGE_CUBE
#  define GL_IMAGE_CUBE 0x9050
#endif
#ifndef GL_IMAGE_BUFFER
#  define GL_IMAGE_BUFFER 0x9051
#endif
#ifndef GL_IMAGE_1D_ARRAY
#  define GL_IMAGE_1D_ARRAY 0x9052
#endif
#ifndef GL_IMAGE_2D_ARRAY
#  define GL_IMAGE_2D_ARRAY 0x9053
#endif
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#  define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE
#  define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif
#ifndef GL_INT_IMAGE_1D
#  define GL_INT_IMAGE_1D 0x9057
#endif
#ifndef GL_INT_IMAGE_2D
#  define GL_INT_IMAGE_2D 0x9058
#endif
#ifndef GL_INT_IMAGE_3D
#  define GL_INT_IMAGE_3D 0x9059
#endif
#ifndef GL_INT_IMAGE_2D_RECT
#  define GL_INT_IMAGE_2D_RECT 0x905A
#endif
#ifndef GL_INT_IMAGE_CUBE
#  define GL_INT_IMAGE_CUBE 0x905B
#endif
#ifndef GL_INT_IMAGE_BUFFER
#  define GL_INT_IMAGE_BUFFER 0x905C
#endif
#ifndef GL_INT_IMAGE_1D_ARRAY
#  define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif
#ifndef GL_INT_IMAGE_2D_ARRAY
#  define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#  define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#  define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#  define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#  define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#  define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#  define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#  define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#  define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif
#ifndef GL_MAX_IMAGE_SAMPLES
#  define GL_MAX_IMAGE_SAMPLES 0x906D
#endif
#ifndef GL_IMAGE_BINDING_FORMAT
#  define GL_IMAGE_BINDING_FORMAT 0x906E
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#  define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#  define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#  define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#  define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#  define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#  define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#  define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
