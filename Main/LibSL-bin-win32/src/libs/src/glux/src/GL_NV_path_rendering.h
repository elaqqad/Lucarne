
// --------------------------------------------------------
// Generated by glux perl script (Fri Dec  7 13:47:25 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:40 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:53 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:10:13 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:03:28 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:07:32 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:25:53 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Jan  4 09:27:59 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Feb 14 17:16:56 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Sep  7 15:19:01 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Oct  4 19:23:19 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:00 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:08 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Jan  4 13:28:20 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 18:52:00 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 19:31:51 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan 14 20:41:03 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 09:20:23 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 10:46:25 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sun May 11 20:41:57 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue May 20 01:36:38 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Jun 19 23:09:58 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Jul 30 07:19:58 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Mon Feb 23 17:42:56 2015)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_apple_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_path_rendering__
#define __GLUX_GL_NV_path_rendering__

GLUX_NEW_PLUGIN(GL_NV_path_rendering)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PATH_FORMAT_SVG_NV
#  define GL_PATH_FORMAT_SVG_NV 0x9070
#endif
#ifndef GL_PATH_FORMAT_PS_NV
#  define GL_PATH_FORMAT_PS_NV 0x9071
#endif
#ifndef GL_STANDARD_FONT_NAME_NV
#  define GL_STANDARD_FONT_NAME_NV 0x9072
#endif
#ifndef GL_SYSTEM_FONT_NAME_NV
#  define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif
#ifndef GL_FILE_NAME_NV
#  define GL_FILE_NAME_NV 0x9074
#endif
#ifndef GL_PATH_STROKE_WIDTH_NV
#  define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif
#ifndef GL_PATH_END_CAPS_NV
#  define GL_PATH_END_CAPS_NV 0x9076
#endif
#ifndef GL_PATH_INITIAL_END_CAP_NV
#  define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#  define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif
#ifndef GL_PATH_JOIN_STYLE_NV
#  define GL_PATH_JOIN_STYLE_NV 0x9079
#endif
#ifndef GL_PATH_MITER_LIMIT_NV
#  define GL_PATH_MITER_LIMIT_NV 0x907A
#endif
#ifndef GL_PATH_DASH_CAPS_NV
#  define GL_PATH_DASH_CAPS_NV 0x907B
#endif
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#  define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#  define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif
#ifndef GL_PATH_DASH_OFFSET_NV
#  define GL_PATH_DASH_OFFSET_NV 0x907E
#endif
#ifndef GL_PATH_CLIENT_LENGTH_NV
#  define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif
#ifndef GL_PATH_FILL_MODE_NV
#  define GL_PATH_FILL_MODE_NV 0x9080
#endif
#ifndef GL_PATH_FILL_MASK_NV
#  define GL_PATH_FILL_MASK_NV 0x9081
#endif
#ifndef GL_PATH_FILL_COVER_MODE_NV
#  define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#  define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif
#ifndef GL_PATH_STROKE_MASK_NV
#  define GL_PATH_STROKE_MASK_NV 0x9084
#endif
#ifndef GL_PATH_SAMPLE_QUALITY_NV
#  define GL_PATH_SAMPLE_QUALITY_NV 0x9085
#endif
#ifndef GL_PATH_STROKE_BOUND_NV
#  define GL_PATH_STROKE_BOUND_NV 0x9086
#endif
#ifndef GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
#  define GL_PATH_STROKE_OVERSAMPLE_COUNT_NV 0x9087
#endif
#ifndef GL_COUNT_UP_NV
#  define GL_COUNT_UP_NV 0x9088
#endif
#ifndef GL_COUNT_DOWN_NV
#  define GL_COUNT_DOWN_NV 0x9089
#endif
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#  define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif
#ifndef GL_CONVEX_HULL_NV
#  define GL_CONVEX_HULL_NV 0x908B
#endif
#ifndef GL_MULTI_HULLS_NV
#  define GL_MULTI_HULLS_NV 0x908C
#endif
#ifndef GL_BOUNDING_BOX_NV
#  define GL_BOUNDING_BOX_NV 0x908D
#endif
#ifndef GL_TRANSLATE_X_NV
#  define GL_TRANSLATE_X_NV 0x908E
#endif
#ifndef GL_TRANSLATE_Y_NV
#  define GL_TRANSLATE_Y_NV 0x908F
#endif
#ifndef GL_TRANSLATE_2D_NV
#  define GL_TRANSLATE_2D_NV 0x9090
#endif
#ifndef GL_TRANSLATE_3D_NV
#  define GL_TRANSLATE_3D_NV 0x9091
#endif
#ifndef GL_AFFINE_2D_NV
#  define GL_AFFINE_2D_NV 0x9092
#endif
#ifndef GL_PROJECTIVE_2D_NV
#  define GL_PROJECTIVE_2D_NV 0x9093
#endif
#ifndef GL_AFFINE_3D_NV
#  define GL_AFFINE_3D_NV 0x9094
#endif
#ifndef GL_PROJECTIVE_3D_NV
#  define GL_PROJECTIVE_3D_NV 0x9095
#endif
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#  define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_2D_NV
#  define GL_TRANSPOSE_PROJECTIVE_2D_NV 0x9097
#endif
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#  define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif
#ifndef GL_TRANSPOSE_PROJECTIVE_3D_NV
#  define GL_TRANSPOSE_PROJECTIVE_3D_NV 0x9099
#endif
#ifndef GL_UTF8_NV
#  define GL_UTF8_NV 0x909A
#endif
#ifndef GL_UTF16_NV
#  define GL_UTF16_NV 0x909B
#endif
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#  define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif
#ifndef GL_PATH_COMMAND_COUNT_NV
#  define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif
#ifndef GL_PATH_COORD_COUNT_NV
#  define GL_PATH_COORD_COUNT_NV 0x909E
#endif
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#  define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#  define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#  define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#  define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif
#ifndef GL_SQUARE_NV
#  define GL_SQUARE_NV 0x90A3
#endif
#ifndef GL_ROUND_NV
#  define GL_ROUND_NV 0x90A4
#endif
#ifndef GL_TRIANGULAR_NV
#  define GL_TRIANGULAR_NV 0x90A5
#endif
#ifndef GL_BEVEL_NV
#  define GL_BEVEL_NV 0x90A6
#endif
#ifndef GL_MITER_REVERT_NV
#  define GL_MITER_REVERT_NV 0x90A7
#endif
#ifndef GL_MITER_TRUNCATE_NV
#  define GL_MITER_TRUNCATE_NV 0x90A8
#endif
#ifndef GL_SKIP_MISSING_GLYPH_NV
#  define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif
#ifndef GL_USE_MISSING_GLYPH_NV
#  define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif
#ifndef GL_PATH_ERROR_POSITION_NV
#  define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif
#ifndef GL_PATH_FOG_GEN_MODE_NV
#  define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#  define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif
#ifndef GL_ADJACENT_PAIRS_NV
#  define GL_ADJACENT_PAIRS_NV 0x90AE
#endif
#ifndef GL_FIRST_TO_REST_NV
#  define GL_FIRST_TO_REST_NV 0x90AF
#endif
#ifndef GL_PATH_GEN_MODE_NV
#  define GL_PATH_GEN_MODE_NV 0x90B0
#endif
#ifndef GL_PATH_GEN_COEFF_NV
#  define GL_PATH_GEN_COEFF_NV 0x90B1
#endif
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#  define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif
#ifndef GL_PATH_GEN_COMPONENTS_NV
#  define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif
#ifndef GL_PATH_STENCIL_FUNC_NV
#  define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif
#ifndef GL_PATH_STENCIL_REF_NV
#  define GL_PATH_STENCIL_REF_NV 0x90B8
#endif
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#  define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#  define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#  define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#  define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif
#ifndef GL_MOVE_TO_RESETS_NV
#  define GL_MOVE_TO_RESETS_NV 0x90B5
#endif
#ifndef GL_MOVE_TO_CONTINUES_NV
#  define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif
#ifndef GL_CLOSE_PATH_NV
#  define GL_CLOSE_PATH_NV 0x00
#endif
#ifndef GL_MOVE_TO_NV
#  define GL_MOVE_TO_NV 0x02
#endif
#ifndef GL_RELATIVE_MOVE_TO_NV
#  define GL_RELATIVE_MOVE_TO_NV 0x03
#endif
#ifndef GL_LINE_TO_NV
#  define GL_LINE_TO_NV 0x04
#endif
#ifndef GL_RELATIVE_LINE_TO_NV
#  define GL_RELATIVE_LINE_TO_NV 0x05
#endif
#ifndef GL_HORIZONTAL_LINE_TO_NV
#  define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#  define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif
#ifndef GL_VERTICAL_LINE_TO_NV
#  define GL_VERTICAL_LINE_TO_NV 0x08
#endif
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#  define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif
#ifndef GL_QUADRATIC_CURVE_TO_NV
#  define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif
#ifndef GL_CUBIC_CURVE_TO_NV
#  define GL_CUBIC_CURVE_TO_NV 0x0C
#endif
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#  define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif
#ifndef GL_SMALL_CCW_ARC_TO_NV
#  define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif
#ifndef GL_SMALL_CW_ARC_TO_NV
#  define GL_SMALL_CW_ARC_TO_NV 0x14
#endif
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#  define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif
#ifndef GL_LARGE_CCW_ARC_TO_NV
#  define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif
#ifndef GL_LARGE_CW_ARC_TO_NV
#  define GL_LARGE_CW_ARC_TO_NV 0x18
#endif
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#  define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif
#ifndef GL_RESTART_PATH_NV
#  define GL_RESTART_PATH_NV 0xF0
#endif
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#  define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#  define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif
#ifndef GL_RECT_NV
#  define GL_RECT_NV 0xF6
#endif
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#  define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#  define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#  define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif
#ifndef GL_ARC_TO_NV
#  define GL_ARC_TO_NV 0xFE
#endif
#ifndef GL_RELATIVE_ARC_TO_NV
#  define GL_RELATIVE_ARC_TO_NV 0xFF
#endif
#ifndef GL_BOLD_BIT_NV
#  define GL_BOLD_BIT_NV 0x01
#endif
#ifndef GL_ITALIC_BIT_NV
#  define GL_ITALIC_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_WIDTH_BIT_NV
#  define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#  define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#  define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif
#ifndef GL_GLYPH_HAS_KERNING_NV
#  define GL_GLYPH_HAS_KERNING_NV 0x100
#endif
#ifndef GL_FONT_X_MIN_BOUNDS_NV
#  define GL_FONT_X_MIN_BOUNDS_NV 0x00010000
#endif
#ifndef GL_FONT_Y_MIN_BOUNDS_NV
#  define GL_FONT_Y_MIN_BOUNDS_NV 0x00020000
#endif
#ifndef GL_FONT_X_MAX_BOUNDS_NV
#  define GL_FONT_X_MAX_BOUNDS_NV 0x00040000
#endif
#ifndef GL_FONT_Y_MAX_BOUNDS_NV
#  define GL_FONT_Y_MAX_BOUNDS_NV 0x00080000
#endif
#ifndef GL_FONT_UNITS_PER_EM_NV
#  define GL_FONT_UNITS_PER_EM_NV 0x00100000
#endif
#ifndef GL_FONT_ASCENDER_NV
#  define GL_FONT_ASCENDER_NV 0x00200000
#endif
#ifndef GL_FONT_DESCENDER_NV
#  define GL_FONT_DESCENDER_NV 0x00400000
#endif
#ifndef GL_FONT_HEIGHT_NV
#  define GL_FONT_HEIGHT_NV 0x00800000
#endif
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_NV
#  define GL_FONT_MAX_ADVANCE_WIDTH_NV 0x01000000
#endif
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_NV
#  define GL_FONT_MAX_ADVANCE_HEIGHT_NV 0x02000000
#endif
#ifndef GL_FONT_UNDERLINE_POSITION_NV
#  define GL_FONT_UNDERLINE_POSITION_NV 0x04000000
#endif
#ifndef GL_FONT_UNDERLINE_THICKNESS_NV
#  define GL_FONT_UNDERLINE_THICKNESS_NV 0x08000000
#endif
#ifndef GL_FONT_HAS_KERNING_NV
#  define GL_FONT_HAS_KERNING_NV 0x10000000
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGenPathsNV
typedef GLuint (APIENTRYP PFNGLUXGENPATHSNVPROC) (GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
typedef void (APIENTRYP PFNGLUXDELETEPATHSNVPROC) (GLuint path, GLsizei range);
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPATHNVPROC) (GLuint path);
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
typedef void (APIENTRYP PFNGLUXPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
typedef void (APIENTRYP PFNGLUXPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLUXPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
typedef void (APIENTRYP PFNGLUXPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLUXPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
typedef void (APIENTRYP PFNGLUXWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
typedef void (APIENTRYP PFNGLUXCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLUXINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
typedef void (APIENTRYP PFNGLUXTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
typedef void (APIENTRYP PFNGLUXPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
typedef void (APIENTRYP PFNGLUXPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLUXPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
typedef void (APIENTRYP PFNGLUXPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
typedef void (APIENTRYP PFNGLUXPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
typedef void (APIENTRYP PFNGLUXPATHFOGGENNVPROC) (GLenum genMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLUXGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLUXGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLUXGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLUXGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
typedef void (APIENTRYP PFNGLUXGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
typedef void (APIENTRYP PFNGLUXGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
typedef GLboolean (APIENTRYP PFNGLUXISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
typedef GLfloat (APIENTRYP PFNGLUXGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
typedef GLboolean (APIENTRYP PFNGLUXPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGenPathsNV
extern PFNGLUXGENPATHSNVPROC glGenPathsNV;
#endif
#ifndef __GLUX__GLFCT_glDeletePathsNV
extern PFNGLUXDELETEPATHSNVPROC glDeletePathsNV;
#endif
#ifndef __GLUX__GLFCT_glIsPathNV
extern PFNGLUXISPATHNVPROC glIsPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathCommandsNV
extern PFNGLUXPATHCOMMANDSNVPROC glPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoordsNV
extern PFNGLUXPATHCOORDSNVPROC glPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCommandsNV
extern PFNGLUXPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glPathSubCoordsNV
extern PFNGLUXPATHSUBCOORDSNVPROC glPathSubCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glPathStringNV
extern PFNGLUXPATHSTRINGNVPROC glPathStringNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphsNV
extern PFNGLUXPATHGLYPHSNVPROC glPathGlyphsNV;
#endif
#ifndef __GLUX__GLFCT_glPathGlyphRangeNV
extern PFNGLUXPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
#endif
#ifndef __GLUX__GLFCT_glWeightPathsNV
extern PFNGLUXWEIGHTPATHSNVPROC glWeightPathsNV;
#endif
#ifndef __GLUX__GLFCT_glCopyPathNV
extern PFNGLUXCOPYPATHNVPROC glCopyPathNV;
#endif
#ifndef __GLUX__GLFCT_glInterpolatePathsNV
extern PFNGLUXINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
#endif
#ifndef __GLUX__GLFCT_glTransformPathNV
extern PFNGLUXTRANSFORMPATHNVPROC glTransformPathNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterivNV
extern PFNGLUXPATHPARAMETERIVNVPROC glPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameteriNV
extern PFNGLUXPATHPARAMETERINVPROC glPathParameteriNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfvNV
extern PFNGLUXPATHPARAMETERFVNVPROC glPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glPathParameterfNV
extern PFNGLUXPATHPARAMETERFNVPROC glPathParameterfNV;
#endif
#ifndef __GLUX__GLFCT_glPathDashArrayNV
extern PFNGLUXPATHDASHARRAYNVPROC glPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilFuncNV
extern PFNGLUXPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathStencilDepthOffsetNV
extern PFNGLUXPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathNV
extern PFNGLUXSTENCILFILLPATHNVPROC glStencilFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathNV
extern PFNGLUXSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glStencilFillPathInstancedNV
extern PFNGLUXSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glStencilStrokePathInstancedNV
extern PFNGLUXSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glPathCoverDepthFuncNV
extern PFNGLUXPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
#endif
#ifndef __GLUX__GLFCT_glPathColorGenNV
extern PFNGLUXPATHCOLORGENNVPROC glPathColorGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathTexGenNV
extern PFNGLUXPATHTEXGENNVPROC glPathTexGenNV;
#endif
#ifndef __GLUX__GLFCT_glPathFogGenNV
extern PFNGLUXPATHFOGGENNVPROC glPathFogGenNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathNV
extern PFNGLUXCOVERFILLPATHNVPROC glCoverFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathNV
extern PFNGLUXCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glCoverFillPathInstancedNV
extern PFNGLUXCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glCoverStrokePathInstancedNV
extern PFNGLUXCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterivNV
extern PFNGLUXGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathParameterfvNV
extern PFNGLUXGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCommandsNV
extern PFNGLUXGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathCoordsNV
extern PFNGLUXGETPATHCOORDSNVPROC glGetPathCoordsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathDashArrayNV
extern PFNGLUXGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricsNV
extern PFNGLUXGETPATHMETRICSNVPROC glGetPathMetricsNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathMetricRangeNV
extern PFNGLUXGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathSpacingNV
extern PFNGLUXGETPATHSPACINGNVPROC glGetPathSpacingNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenivNV
extern PFNGLUXGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathColorGenfvNV
extern PFNGLUXGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenivNV
extern PFNGLUXGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathTexGenfvNV
extern PFNGLUXGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInFillPathNV
extern PFNGLUXISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
#endif
#ifndef __GLUX__GLFCT_glIsPointInStrokePathNV
extern PFNGLUXISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
#endif
#ifndef __GLUX__GLFCT_glGetPathLengthNV
extern PFNGLUXGETPATHLENGTHNVPROC glGetPathLengthNV;
#endif
#ifndef __GLUX__GLFCT_glPointAlongPathNV
extern PFNGLUXPOINTALONGPATHNVPROC glPointAlongPathNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
