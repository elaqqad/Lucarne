
// --------------------------------------------------------
// Generated by glux perl script (Fri Dec  7 13:47:27 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:46 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:54 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:10:13 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:03:30 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:07:33 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:25:55 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Jan  4 09:29:06 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Feb 14 17:17:07 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Sep  7 15:19:01 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Oct  4 19:23:21 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:01 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:09 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Jan  4 13:28:24 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 18:52:05 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 19:31:51 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan 14 20:41:06 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 09:20:26 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 10:46:25 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sun May 11 20:42:01 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue May 20 01:36:42 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Jun 19 23:10:00 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Jul 30 07:20:01 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Mon Feb 23 17:43:01 2015)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_apple_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_atomic_counters__
#define __GLUX_GL_ARB_shader_atomic_counters__

GLUX_NEW_PLUGIN(GL_ARB_shader_atomic_counters)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_ATOMIC_COUNTER_BUFFER
#  define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#  define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#  define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#  define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#  define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#  define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#  define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#  define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#  define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#  define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#  define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#  define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#  define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#  define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#  define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
