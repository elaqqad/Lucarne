
// --------------------------------------------------------
// Generated by glux perl script (Fri Dec  7 13:47:29 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:48 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:54 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:10:14 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:03:31 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:07:33 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:25:55 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Jan  4 09:29:07 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Feb 14 17:17:08 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Sep  7 15:19:01 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Oct  4 19:23:22 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:02 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:09 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Jan  4 13:28:25 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 18:52:08 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 19:31:51 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan 14 20:41:09 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 09:20:29 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 10:46:26 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sun May 11 20:42:05 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue May 20 01:36:44 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Jun 19 23:10:03 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Jul 30 07:20:03 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Mon Feb 23 17:43:05 2015)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_apple_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_uniform_buffer_object__
#define __GLUX_GL_ARB_uniform_buffer_object__

GLUX_NEW_PLUGIN(GL_ARB_uniform_buffer_object)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_UNIFORM_BUFFER
#  define GL_UNIFORM_BUFFER 0x8A11
#endif
#ifndef GL_UNIFORM_BUFFER_BINDING
#  define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif
#ifndef GL_UNIFORM_BUFFER_START
#  define GL_UNIFORM_BUFFER_START 0x8A29
#endif
#ifndef GL_UNIFORM_BUFFER_SIZE
#  define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#  define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#  define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#  define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#  define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#  define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#  define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#  define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#  define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#  define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#  define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif
#ifndef GL_UNIFORM_TYPE
#  define GL_UNIFORM_TYPE 0x8A37
#endif
#ifndef GL_UNIFORM_SIZE
#  define GL_UNIFORM_SIZE 0x8A38
#endif
#ifndef GL_UNIFORM_NAME_LENGTH
#  define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif
#ifndef GL_UNIFORM_BLOCK_INDEX
#  define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif
#ifndef GL_UNIFORM_OFFSET
#  define GL_UNIFORM_OFFSET 0x8A3B
#endif
#ifndef GL_UNIFORM_ARRAY_STRIDE
#  define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif
#ifndef GL_UNIFORM_MATRIX_STRIDE
#  define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#  define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif
#ifndef GL_UNIFORM_BLOCK_BINDING
#  define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#  define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#  define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#  define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#  define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif
#ifndef GL_INVALID_INDEX
#  define GL_INVALID_INDEX 0xFFFFFFFFu
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glGetUniformIndices
typedef void (APIENTRYP PFNGLUXGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
typedef GLuint (APIENTRYP PFNGLUXGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
typedef void (APIENTRYP PFNGLUXUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glGetUniformIndices
extern PFNGLUXGETUNIFORMINDICESPROC glGetUniformIndices;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformsiv
extern PFNGLUXGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformName
extern PFNGLUXGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetUniformBlockIndex
extern PFNGLUXGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockiv
extern PFNGLUXGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformBlockName
extern PFNGLUXGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
#endif
#ifndef __GLUX__GLFCT_glUniformBlockBinding
extern PFNGLUXUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
