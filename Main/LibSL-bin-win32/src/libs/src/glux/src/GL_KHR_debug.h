
// --------------------------------------------------------
// Generated by glux perl script (Fri Dec  7 13:47:27 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:45 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:08:54 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Dec  8 07:10:13 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:03:30 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:07:33 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Dec 21 11:25:55 2012)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Jan  4 09:29:06 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Feb 14 17:17:07 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Sep  7 15:19:01 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Fri Oct  4 19:23:21 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:01 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Dec 18 08:37:09 2013)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sat Jan  4 13:28:23 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 18:52:04 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan  7 19:31:51 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Jan 14 20:41:06 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 09:20:26 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue Feb 11 10:46:25 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Sun May 11 20:42:01 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Tue May 20 01:36:41 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Thu Jun 19 23:10:00 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Wed Jul 30 07:20:01 2014)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------

// --------------------------------------------------------
// Generated by glux perl script (Mon Feb 23 17:43:00 2015)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#ifdef WIN32
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#ifdef WIN32
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
#  include "glux_apple_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_KHR_debug__
#define __GLUX_GL_KHR_debug__

GLUX_NEW_PLUGIN(GL_KHR_debug)
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#  define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#  define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#  define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#  define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif
#ifndef GL_DEBUG_SOURCE_API
#  define GL_DEBUG_SOURCE_API 0x8246
#endif
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#  define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#  define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#  define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif
#ifndef GL_DEBUG_SOURCE_APPLICATION
#  define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif
#ifndef GL_DEBUG_SOURCE_OTHER
#  define GL_DEBUG_SOURCE_OTHER 0x824B
#endif
#ifndef GL_DEBUG_TYPE_ERROR
#  define GL_DEBUG_TYPE_ERROR 0x824C
#endif
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#  define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#  define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif
#ifndef GL_DEBUG_TYPE_PORTABILITY
#  define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#  define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif
#ifndef GL_DEBUG_TYPE_OTHER
#  define GL_DEBUG_TYPE_OTHER 0x8251
#endif
#ifndef GL_DEBUG_TYPE_MARKER
#  define GL_DEBUG_TYPE_MARKER 0x8268
#endif
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#  define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif
#ifndef GL_DEBUG_TYPE_POP_GROUP
#  define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#  define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#  define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#  define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif
#ifndef GL_BUFFER
#  define GL_BUFFER 0x82E0
#endif
#ifndef GL_SHADER
#  define GL_SHADER 0x82E1
#endif
#ifndef GL_PROGRAM
#  define GL_PROGRAM 0x82E2
#endif
#ifndef GL_QUERY
#  define GL_QUERY 0x82E3
#endif
#ifndef GL_PROGRAM_PIPELINE
#  define GL_PROGRAM_PIPELINE 0x82E4
#endif
#ifndef GL_SAMPLER
#  define GL_SAMPLER 0x82E6
#endif
#ifndef GL_DISPLAY_LIST
#  define GL_DISPLAY_LIST 0x82E7
#endif
#ifndef GL_MAX_LABEL_LENGTH
#  define GL_MAX_LABEL_LENGTH 0x82E8
#endif
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#  define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#  define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif
#ifndef GL_DEBUG_LOGGED_MESSAGES
#  define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif
#ifndef GL_DEBUG_SEVERITY_HIGH
#  define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#  define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif
#ifndef GL_DEBUG_SEVERITY_LOW
#  define GL_DEBUG_SEVERITY_LOW 0x9148
#endif
#ifndef GL_DEBUG_OUTPUT
#  define GL_DEBUG_OUTPUT 0x92E0
#endif
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#  define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
