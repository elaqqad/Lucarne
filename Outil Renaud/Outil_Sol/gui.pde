/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */
 
 /* C:\Users\Lancelot\Documents\temp\0_0_2.png */

import g4p_controls.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;

boolean windowexists = false;
String path="";
String imagename;
float tetha;
String coord;
PImage img1;
int[] px = new int[100];
int[] py = new int[100];
int nbp = 0;
int scroll = 0;
int sizey = 20;

double points[] = new double[8];
double ref[] = new double[8];
double[] center = new double[2];
double[] inter = new double[4];
int nbox = 0;
double rref;
double r;
int dragX;
int dragY;
double l = 1.0;
int sd = -1;

double recpoints[][] = new double[100][8];
int reclen = 0;

int spawnx = -1;
int spawny = -1;

String mode = "line";
boolean firstLock = false;
boolean secondLock = false;
boolean thirdLock = false;
boolean klock = false;

public void textfield1_change1(GTextField source, GEvent event) { //_CODE_:textfield1:643253:
  println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
  path = source.getText();
  println(path);
} //_CODE_:textfield1:643253:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:405242:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  
  int k = path.length()-1;
  if(!path.equals("")){
    while(k>-1 && !path.substring(k,k+1).equals("\\")){k--;}
    if(k!=-1){
      imagename = path.substring(k+1,path.length());
      path = path.substring(0,k+1);
      println(imagename);
      println(path);
      if(!windowexists){
        copy_to_data();
        img1= loadImage(imagename);
        //println(img1.width);
        //img1.resize(img1.width/2,img1.height/2);
        //println(img1.width);
        window1 = new GWindow(this, imagename, 0, 0, img1.width, img1.height, false, JAVA2D);
        window1.addData(new MyWinData());
        window1.addMouseHandler(this, "windowMouse");
        window1.addDrawHandler(this, "win_draw2");
        window1.setActionOnClose(GWindow.CLOSE_WINDOW);
        windowexists = true;
      }
    }
  }
} //_CODE_:button1:405242:

public void button2_click1(GButton source, GEvent event) { //_CODE_:button2:332866:
  println("button2 - GButton >> GEvent." + event + " @ " + millis());
  if(nbp>=2){
    copy_to_source();
  }
  nbp=0;
  window1.close();
  windowexists = false;
} //_CODE_:button2:332866:

public void button3_click1(GButton source, GEvent event) {
  mode = "line";
  firstLock = false;
  secondLock = false;
  thirdLock = false;
}

public void button4_click1(GButton source, GEvent event) {
  mode = "box";
  firstLock = false;
  secondLock = false;
  thirdLock = false;
}

public void button5_click1(GButton source, GEvent event) {
  if (mode == "box" && nbox == 3) {
    for (int k = 0; k < 8; k++) {
      recpoints[reclen][k] = points[k];
    }
    reclen += 1;
    points = new double[8];
    ref = new double[8];
    center = new double[2];
    inter = new double[4];
    nbox = 0;
    l = 1.0;
    sd = -1;
    rref = 0;
    r = 0;
    dragX = 0;
    dragY = 0;
  }
  firstLock = false;
  secondLock = false;
  thirdLock = false;
}

public void button6_click1(GButton source, GEvent event) {
  mode = "spawn";
  firstLock = false;
  secondLock = false;
  thirdLock = false;
}

// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  textfield1 = new GTextField(this, 58, 149, 354, 24, G4P.SCROLLBARS_NONE);
  textfield1.setOpaque(true);
  textfield1.addEventHandler(this, "textfield1_change1");
  label1 = new GLabel(this, 168, 128, 130, 20);
  label1.setText("Adresse de l'image :");
  label1.setOpaque(false);
  button1 = new GButton(this, 196, 188, 80, 30);
  button1.setText("Commencer");
  button1.addEventHandler(this, "button1_click1");
  button2 = new GButton(this, 196, 246, 80, 30);
  button2.setText("Finir");
  button2.addEventHandler(this, "button2_click1");
  button3 = new GButton(this, 196, 304, 80, 30);
  button3.setText("Sol");
  button3.addEventHandler(this, "button3_click1");
  button4 = new GButton(this, 196, 362, 80, 30);
  button4.setText("Boite");
  button4.addEventHandler(this, "button4_click1");
  button5 = new GButton(this, 196, 420, 80, 30);
  button5.setText("Nouveau rectangle");
  button5.addEventHandler(this, "button5_click1");
  button6 = new GButton(this, 196, 478, 80, 30);
  button6.setText("Spawn");
  button6.addEventHandler(this, "button6_click1");
}

// Variable declarations 
// autogenerated do not edit
GTextField textfield1; 
GLabel label1; 
GButton button1; 
GButton button2;
GButton button3; 
GButton button4; 
GButton button5; 
GButton button6; 
GWindow window1; 

void windowMouse(GWinApplet appc, GWinData data, MouseEvent event) {
  MyWinData data2 = (MyWinData)data;
  data2.ex = appc.mouseX;
  data2.ey = appc.mouseY;
  switch(event.getAction()) {
  case MouseEvent.PRESS:
    mousePressed = true;
    break;
  case MouseEvent.RELEASE:
    data2.ex = appc.mouseX;
    data2.ey = appc.mouseY;
    mousePressed = false;
    break;
  }
}

class MyWinData extends GWinData {
  int sx, sy, ex, ey;
  boolean done;
}

void copy_to_data() {
  
  File sourceFile = new File(path+imagename);
  File destFile = new File(dataPath(imagename));


  /* verify whether file exist in source location */
  if (!sourceFile.exists()) {
    println("Source File Not Found!");
  }

  /* if file not exist then create one */
  if (!destFile.exists()) {
    try {
      destFile.createNewFile();
      
      println("Destination file doesn't exist. Creating one!");
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  FileChannel source = null;
  FileChannel destination = null;

  try {

    /**
     * getChannel() returns unique FileChannel object associated a file
     * output stream.
     */
    source = new FileInputStream(sourceFile).getChannel();

    destination = new FileOutputStream(destFile).getChannel();

    if (destination != null && source != null) {
      destination.transferFrom(source, 0, source.size());
    }

  } catch (FileNotFoundException e) {
    e.printStackTrace();
  } catch (IOException e) {
    e.printStackTrace();
  }

  finally {
    if (source != null) {
      try {
        source.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    if (destination != null) {
      try {
        destination.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }
}

synchronized public void win_draw2(GWinApplet appc, GWinData data) { //_CODE_:window1:581472:
  
  MyWinData data2 = (MyWinData)data;
  appc.size(img1.width, img1.height);
  appc.background(img1);
  if(nbp>0){
    appc.ellipse(px[0], py[0], 8, 8);
  }
  
  // Draw Ground
  if(nbp>1){
    for(int k = 1; k<nbp ; k++){
      appc.ellipse(px[k], py[k], 8, 8);
      appc.line(px[k-1], py[k-1], px[k], py[k]);
    }
  }
  
  for (int k = 0; k < reclen; k++) {
    appc.line((int)recpoints[k][0],(int)recpoints[k][1],(int)recpoints[k][4],(int)recpoints[k][5]);
    appc.line((int)recpoints[k][2],(int)recpoints[k][3],(int)recpoints[k][4],(int)recpoints[k][5]);
    appc.line((int)recpoints[k][0],(int)recpoints[k][1],(int)recpoints[k][6],(int)recpoints[k][7]);
    appc.line((int)recpoints[k][2],(int)recpoints[k][3],(int)recpoints[k][6],(int)recpoints[k][7]);
    for (int k2 = 0; k2 < 8; k2++) {
      println(recpoints[k][k2]);
    }
    println("Break");
  }
  
  // Draw boxes
  for(int k = 0; k < nbox ; k++){
    appc.fill(255);
    appc.ellipse((int)points[2*k], (int)points[2*k+1], 8, 8);
    if(nbox == 3){
      appc.ellipse((int)points[6], (int)points[7], 8, 8);
      appc.line((int)points[0],(int)points[1],(int)points[4],(int)points[5]);
      appc.line((int)points[2],(int)points[3],(int)points[4],(int)points[5]);
      appc.line((int)points[0],(int)points[1],(int)points[6],(int)points[7]);
      appc.line((int)points[2],(int)points[3],(int)points[6],(int)points[7]);
    }
  }
  
  if(nbox==2){
    l= Math.sqrt(Math.pow((center[0]-data2.ex),2)+Math.pow((center[1]-data2.ey),2));
    inter[0] = (center[0]-rref*(center[0]-data2.ex)/l);
    inter[1] = (center[1]-rref*(center[1]-data2.ey)/l);
    inter[2] = 2*center[0] - inter[0];
    inter[3] = 2*center[1] - inter[1];
    appc.fill(125);
    appc.ellipse((int)inter[0], (int)inter[1], 8, 8);
    appc.ellipse((int)inter[2], (int)inter[3], 8, 8);
  }
  if(nbox >= 2){
    appc.ellipse((int)center[0], (int)center[1], 8, 8);
  }
  
  appc.line(data2.ex-66, data2.ey, data2.ex+66, data2.ey);
  appc.line(data2.ex, data2.ey-66, data2.ex, data2.ey+66);
  
  if (spawnx != -1 && spawny != -1) {
    appc.line(spawnx-20, spawny, spawnx+20, spawny);
    appc.line(spawnx, spawny-20, spawnx, spawny+20);
  } 
  
  if (mousePressed && klock) {
    klock = false;
  } else if (mousePressed && !firstLock && !secondLock && !thirdLock) {
    firstLock = true;
  } else if (!mousePressed && firstLock && !thirdLock) {
    secondLock = true;
    firstLock = false;
  } else if (mousePressed && secondLock) {
    if (mode == "spawn") {
      spawnx = (int)data2.ex;
      spawny = (int)data2.ey;
    } else if (mode == "line") {
      if (nbp<100 && ((nbp>0 && data2.ex>px[nbp-1]) || nbp==0)) {
        px[nbp]=data2.ex;
        println(data2.ex);
        py[nbp]=data2.ey;
        println(data2.ey);
        nbp++;
      }
    } else if (mode == "box") {
      if (nbox < 3) {
        stroke(255);
        points[2*nbox]=data2.ex;
        points[2*nbox+1]=data2.ey;
        nbox = min((nbox+1),3);
        if(nbox==3){
          points[4] = inter[0];
          points[5] = inter[1];
          points[6] = inter[2];
          points[7] = inter[3];
          update_ref();
        }
        if(nbox == 2){
          center[0]=(points[0]+points[2])/2.0;
          center[1]=(points[1]+points[3])/2.0;
          r = Math.sqrt(Math.pow((center[0]-points[0]),2)+Math.pow((center[1]-points[1]),2));
          rref = r;
        }
      } else if(nbox==3){
        for(int k = 0; k<4; k++){
          if(Math.sqrt(Math.pow((data2.ex-points[2*k]),2)+Math.pow((data2.ey-points[2*k+1]),2))<=4.0){
            sd = k;
            rref=r;
          }
        }
        if(Math.sqrt(Math.pow((data2.ex-center[0]),2)+Math.pow((data2.ey-center[1]),2))<=4.0){
          sd = 4;
          dragX = data2.ex;
          dragY = data2.ey;
          rref=r;
        }
      }
    }
    thirdLock = true;
    secondLock = false;
  } else if (mousePressed && thirdLock && sd > -1 && mode == "box") {
    if(sd<4){
      int sd2=0;
      if(sd==0){sd2 = 1;}
      if(sd==1){sd2 = 0;}
      if(sd==2){sd2 = 3;}
      if(sd==3){sd2 = 2;}
      l= Math.sqrt(Math.pow((center[0]-data2.ex),2)+Math.pow((center[1]-data2.ey),2));
      points[2*sd] = (center[0]-r*(center[0]-data2.ex)/l);
      points[2*sd+1] = (center[1]-r*(center[1]-data2.ey)/l);
      points[2*sd2] = 2*center[0] - points[2*sd];
      points[2*sd2+1] = 2*center[1] - points[2*sd+1];
      update_ref();
    }else{
      int dx = data2.ex-dragX;
      int dy = data2.ey-dragY;
      dragX = data2.ex;
      dragY = data2.ey;
      for(int k = 0; k<4 ; k++){
        points[2*k] += dx;
        points[2*k+1] += dy;
        update_ref();
      }
      center[0] += dx;
      center[1] += dy;
    }
  } else if (!mousePressed && thirdLock) {
    stroke(0);
    thirdLock = false;
  }
}

void update_ref(){
  for(int k = 0 ; k<8; k++){ref[k] = points[k];}
}

void mouseWheel(MouseEvent event) {
  scroll = event.getCount();
  println(scroll);
}

void copy_to_source(){
  
  for(int l = 0; l<nbp ; l++){
    px[l]=px[l];
    py[l]=(img1.height-py[l]);
    //println("("+px[l]+","+py[l]+")");
  }
  println(imagename);
  int k = imagename.length()-1;
  while(k>0 && !imagename.substring(k,k+1).equals(".")){k--;}
  coord = imagename.substring(0,k)+".dat";
  println(coord);
  File destFile = new File(path+coord);

 try {
 
     spawny = img1.height - spawny;
      String content = /*"length = "+ */ spawnx + "\n" + spawny + "\n\n" + (nbp + reclen - 1) + "\n\n";
      for(int i=1; i<nbp; i++){
        content += /*"sizex["+i+"] = "+*/(int)Math.sqrt(Math.pow((px[i-1]-px[i]),2)+Math.pow((py[i-1]-py[i]),2)) +"\n";
        content += sizey + "\n";
        tetha = (float)Math.atan(((double)(py[i-1]-py[i]))/((double)(px[i-1]-px[i])));
        //println(((double)(py[i-1]-py[i]))/((double)(px[i]-px[i-1])));
        content += /*"angle["+i+"] = "+*/tetha+"\n";
        content += /*"ctrx["+i+"] = "+*/(int)((px[i-1]+px[i]+sizey*Math.sin(tetha))/2)+"\n";
        content += /*"ctry["+i+"] = "+*/(/*img1.width*2-*/(int)((py[i-1]+py[i]-sizey*Math.cos(tetha))/2))+"\n";
        content += "\n";
      }
      
      for (int i = 0; i < reclen; i++) {
        for (int i2 = 0; i2 < 8; i2++) {
          points[i2] = recpoints[i][i2];
        }
        points[1] = img1.height - points[1];
        points[5] = img1.height - points[5];
        points[3] = img1.height - points[3];
        points[7] = img1.height - points[7];
        double recsx = (int)Math.sqrt(Math.pow(points[0] - points[4],2)+Math.pow((points[1] - points[5]),2));
        double recsy = (int)Math.sqrt(Math.pow(points[0] - points[6],2)+Math.pow((points[1] - points[7]),2));
        double recangle = (float)Math.atan(((double)(points[1] - points[5]))/((double)(points[0] - points[4])));
        double reccx = (int)((points[0]+points[4]+recsy*Math.sin(recangle))/2);
        double reccy = (int)((points[1]+points[5]-recsy*Math.cos(recangle))/2);
        content += recsx + "\n" + recsy + "\n" + recangle + "\n" + reccx + "\n" + reccy + "\n\n";
      }
 
      File file = new File(path+coord);
 
      // if file doesnt exists, then create it
      if (!file.exists()) {
        file.createNewFile();
      }
 
      FileWriter fw = new FileWriter(file.getAbsoluteFile());
      BufferedWriter bw = new BufferedWriter(fw);
      bw.write(content);
      bw.close();
 
      System.out.println("Done");
 
    } catch (IOException e) {
      e.printStackTrace();
    }
 
}
